
# Project identifier used for namespacing functions and tags. Should align with the namespace in the source folder.
id: "simplenergy"
# Project name that will be used in messages, item lore, etc.
name: "SimplEnergy"
# Pack description for pack.mcmeta. Defaults to "{name} [{version}] by {author}" if empty.
description: ""
# Author(s) name(s) displayed in pack.mcmeta, also used to add 'convention.debug' tag to the players of the same name(s) <-- showing additionnal displays like datapack loading
author: "Stoupy51"
# Project version in semantic versioning format: major.minor.patch (e.g., 1.0.0 or 2.84.615).
version: "2.0.7"
# Minecraft version. Determines what resources beet loads (plugins like `mecha` determine what commands to use). Defaults: Latest
minecraft: "1.21.7"

# Defines the directory that beet uses for the base path
directory: "."
# Path to a folder for beet to output. If not defined, no files will visibly output
output: "build"
# List of files or glob patterns that should be ignored by the file watcher and not cause any rebuild when using `$ beet watch`
ignore: []

# A list of importable plugin strings
require:
    - "stewbeet"

# Takes a nested pack config, see PackConfig() documentation
data_pack:
    name: "datapack"
    load: ["src"]

# Takes a nested pack config, see PackConfig() documentation
resource_pack:
    name: resource_pack
    load: ["src"]

# A list of strings or dicts representing "plugins".
# - These plugins will execute after the pack is loaded
# - If item = str, should be a path to an importable plugin (ex: "stewbeet.plugins.auto_lang")
# - If item = dict, should be a nestable project config
#     - Each sub-pipeline creates a temp context inheriting the parent context
pipeline:
    - "src.definitions.setup_main" # User code
    - "src.definitions.setup_external" # User code
    - "stewbeet.all"
    - "src.link" # User code

# Generic dict which holds extra information usable by plugins
meta:
    # Model resolver configuration for caching models
    model_resolver:
        use_cache: true

    # Mecha configuration for multiline support and pattern matching
    mecha:
        multiline: true
        match: ["simplenergy:**"]
        formatting:
            layout: "preserve"
            cmd_compact: true
            nbt_compact: true
            json_compact: true
            json_ensure_ascii: true
            json_allow_nan: true
            json_sort_keys: true

    # StewBeet specific configuration
    stewbeet:
        # Directory containing all project textures
        textures_folder: "assets/textures"
        # Directory containing all custom sounds
        sounds_folder: "assets/sounds"
        # Directory containing all jukebox records
        records_folder: "assets/records"
        # Directory containing libraries that will be copied to the build destination, and merged using Smithed Weld if enabled.
        libs_folder: "libs"
        # Path where definitions debug information will be dumped
        definitions_debug: "definitions_debug.json"
        # Optional list of destination paths where generated files will be copied
        build_copy_destinations:
            # Paths to copy the datapack(s) to
            datapack: ["D:/latest_snapshot/world/datapacks"]
            # Paths to copy the resource pack(s) to
            resource_pack: ["D:/minecraft/snapshot/resourcepacks"]
        # Custom item lore configuration. If set to "auto" or unset, uses project icon followed by PROJECT_NAME
        source_lore: "auto"
        # Automagically checks for dependencies and their minimum required versions at runtime.
        # The url is used when the dependency is not found to suggest where to get it.
        # The version dict key contains the minimum required version of the dependency in [major, minor, patch] format.
        # The main key is the dependency namespace to check for.
        # The name can be whatever you want, it's just used in messages
        load_dependencies:
            energy:
                version: [1, 8, 0]
                name: "DatapackEnergy"
                url: "https://github.com/ICY105/DatapackEnergy"
        # Configuration for in-game manual
        manual:
            # Enables grid display in the manual for debugging
            debug_mode: false
            # Path to directory containing custom manual assets that override defaults
            manual_overrides: "assets/manual_overrides"
            # Enables high-resolution crafting displays in the manual
            high_resolution: true
            # Directory for storing cached manual assets
            cache_path: "manual_cache"
            # Enables caching of Minecraft assets and item renders
            cache_assets: true
            # Enables caching of manual content and images
            cache_pages: false
            # Path for manual debug dump
            json_dump_path: "manual_cache/content.json"
            # Manual title used in book and first page. Defaults to "{name} Manual"
            name: ""
            # Maximum number of items displayed per row in manual (max: 6)
            max_items_per_row: 5
            # Maximum number of rows displayed per page in manual (max: 6)
            max_rows_per_page: 5
            # Text component used for the manual's first page
            first_page_text: [{"text":"The following manual will guide you through recipes and energy statistics about devices.", "color": "#505050"}]
            # Controls generation of showcase images: 0=disabled, 1=manual items only, 2=all project items, 3=both
            showcase_image: 3

